<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Services\AutentiqueService;
use App\Services\TemplateProcessor;
use App\Models\CorretorAkad;
use Exception;
use ReflectionClass;

class TesteHTMLRenderizacaoCommand extends Command
{
    /**
     * The name and signature of the console command.
     */
    protected $signature = 'autentique:test-html-renderizacao 
                           {--skip-api : Pular teste de API e testar apenas renderiza√ß√£o HTML}';

    /**
     * The console command description.
     */
    protected $description = 'Testa a nova implementa√ß√£o de renderiza√ß√£o HTML para templates Autentique';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $this->info('üß™ Testando nova implementa√ß√£o de renderiza√ß√£o HTML...');
        $this->newLine();

        try {
            // Teste 1: TemplateProcessor standalone
            $this->info('üî¨ Teste 1: TemplateProcessor standalone');
            $resultadoTemplate = $this->testarTemplateProcessor();
            
            if ($resultadoTemplate) {
                $this->line('   ‚úÖ TemplateProcessor funcionando corretamente');
            } else {
                $this->error('   ‚ùå Erro no TemplateProcessor');
                return Command::FAILURE;
            }

            // Teste 2: Gera√ß√£o HTML com dados do corretor
            $this->info('üî¨ Teste 2: Gera√ß√£o HTML com dados do corretor');
            $resultadoCorretor = $this->testarGeracaoHTMLCorretor();
            
            if ($resultadoCorretor) {
                $this->line('   ‚úÖ Gera√ß√£o HTML com dados do corretor funcionando');
            } else {
                $this->error('   ‚ùå Erro na gera√ß√£o HTML com dados do corretor');
                return Command::FAILURE;
            }

            // Teste 3: Valida√ß√£o de vari√°veis
            $this->info('üî¨ Teste 3: Valida√ß√£o de substitui√ß√£o de vari√°veis');
            $resultadoValidacao = $this->testarValidacaoVariaveis();
            
            if ($resultadoValidacao) {
                $this->line('   ‚úÖ Valida√ß√£o de vari√°veis funcionando');
            } else {
                $this->error('   ‚ùå Erro na valida√ß√£o de vari√°veis');
                return Command::FAILURE;
            }

            // Teste 4: Limpeza de arquivos tempor√°rios
            $this->info('üî¨ Teste 4: Limpeza de arquivos tempor√°rios');
            $resultadoLimpeza = $this->testarLimpezaArquivos();
            
            if ($resultadoLimpeza) {
                $this->line('   ‚úÖ Limpeza de arquivos funcionando');
            } else {
                $this->error('   ‚ùå Erro na limpeza de arquivos');
                return Command::FAILURE;
            }

            // Teste 5: Integra√ß√£o completa (opcional)
            if (!$this->option('skip-api')) {
                $this->info('üî¨ Teste 5: Simula√ß√£o de integra√ß√£o completa');
                $resultadoIntegracao = $this->testarIntegracaoCompleta();
                
                if ($resultadoIntegracao) {
                    $this->line('   ‚úÖ Simula√ß√£o de integra√ß√£o funcionando');
                } else {
                    $this->error('   ‚ùå Erro na simula√ß√£o de integra√ß√£o');
                    return Command::FAILURE;
                }
            } else {
                $this->line('üî¨ Teste 5: Pulado (--skip-api ativo)');
            }

            $this->newLine();
            $this->info('üéâ Todos os testes de renderiza√ß√£o HTML passaram!');
            $this->mostrarResumo();

            return Command::SUCCESS;

        } catch (Exception $e) {
            $this->error('üí• Erro nos testes: ' . $e->getMessage());
            return Command::FAILURE;
        }
    }

    /**
     * Testar TemplateProcessor isoladamente
     */
    protected function testarTemplateProcessor()
    {
        try {
            $templatePath = storage_path('app/templates/declaracao-akad-template.html');
            
            $processor = new TemplateProcessor($templatePath);
            
            $variaveis = [
                'DATA' => 'S√£o Paulo, 14 de outubro de 2025',
                'NOME_CORRETORA' => 'Corretor Teste Standalone',
                'CODIGO_SUSEP' => '999999',
                'CNPJ_CORRETORA' => '12.345.678/0001-90',
                'DATA_GERACAO' => now()->format('d/m/Y H:i:s')
            ];

            $processor->setVariables($variaveis);
            
            // Validar vari√°veis
            if (!$processor->validateVariables()) {
                $this->line('   ‚ùå Valida√ß√£o de vari√°veis falhou');
                return false;
            }

            // Renderizar e salvar
            $tempFile = $processor->saveToTempFile('teste-standalone.html');
            
            if (!file_exists($tempFile)) {
                $this->line('   ‚ùå Arquivo tempor√°rio n√£o foi criado');
                return false;
            }

            $content = file_get_contents($tempFile);
            $hasUnresolvedVars = preg_match('/\$[A-Z_]+\$/', $content);

            if ($hasUnresolvedVars) {
                $this->line('   ‚ùå Vari√°veis n√£o substitu√≠das encontradas');
                return false;
            }

            $this->line('   üìù Arquivo gerado: ' . basename($tempFile));
            $this->line('   üìè Tamanho: ' . filesize($tempFile) . ' bytes');
            
            // Limpar
            $processor->deleteTempFile($tempFile);
            
            return true;

        } catch (Exception $e) {
            $this->line('   ‚ùå Exce√ß√£o: ' . $e->getMessage());
            return false;
        }
    }

    /**
     * Testar gera√ß√£o HTML com dados do corretor
     */
    protected function testarGeracaoHTMLCorretor()
    {
        try {
            // Simular corretor
            $corretor = new CorretorAkad([
                'id' => 999,
                'nome' => 'Corretor Teste HTML',
                'email' => 'teste@html.com',
                'cpf' => '123.456.789-00',
                'creci' => '888888',
                'estado' => 'RJ',
                'telefone' => '(21) 99999-9999'
            ]);

            $service = new AutentiqueService();
            $reflection = new ReflectionClass($service);
            $method = $reflection->getMethod('gerarHTMLComDados');
            $method->setAccessible(true);

            $resultado = $method->invoke($service, $corretor, 'declaracao-akad-template.html');

            if (!$resultado['success']) {
                $this->line('   ‚ùå Erro: ' . $resultado['error']);
                return false;
            }

            $tempFile = $resultado['file_path'];
            
            if (!file_exists($tempFile)) {
                $this->line('   ‚ùå Arquivo tempor√°rio n√£o existe');
                return false;
            }

            $content = file_get_contents($tempFile);
            
            // Verificar se dados do corretor est√£o no HTML
            if (strpos($content, $corretor->nome) === false) {
                $this->line('   ‚ùå Nome do corretor n√£o encontrado no HTML');
                return false;
            }

            if (strpos($content, $corretor->creci) === false) {
                $this->line('   ‚ùå CRECI do corretor n√£o encontrado no HTML');
                return false;
            }

            $this->line('   üìù Nome do corretor inserido: ‚úì');
            $this->line('   üìù CRECI inserido: ‚úì');
            $this->line('   üìè Tamanho do HTML: ' . filesize($tempFile) . ' bytes');

            // Limpar
            unlink($tempFile);

            return true;

        } catch (Exception $e) {
            $this->line('   ‚ùå Exce√ß√£o: ' . $e->getMessage());
            return false;
        }
    }

    /**
     * Testar valida√ß√£o de vari√°veis
     */
    protected function testarValidacaoVariaveis()
    {
        try {
            $templatePath = storage_path('app/templates/declaracao-akad-template.html');
            $processor = new TemplateProcessor($templatePath);
            
            // Teste com vari√°veis incompletas
            $processor->setVariable('DATA', 'Teste data');
            
            if ($processor->validateVariables()) {
                $this->line('   ‚ùå Valida√ß√£o deveria ter falhado com vari√°veis incompletas');
                return false;
            }

            $this->line('   ‚úì Valida√ß√£o rejeitou vari√°veis incompletas');

            // Teste com todas as vari√°veis
            $processor->setVariables([
                'DATA' => 'S√£o Paulo, 14 de outubro de 2025',
                'NOME_CORRETORA' => 'Teste Valida√ß√£o',
                'CODIGO_SUSEP' => '777777',
                'CNPJ_CORRETORA' => '98.765.432/0001-10',
                'DATA_GERACAO' => now()->format('d/m/Y H:i:s')
            ]);

            if (!$processor->validateVariables()) {
                $this->line('   ‚ùå Valida√ß√£o falhou com todas as vari√°veis definidas');
                return false;
            }

            $this->line('   ‚úì Valida√ß√£o passou com todas as vari√°veis');

            // Verificar informa√ß√µes do template
            $info = $processor->getTemplateInfo();
            $this->line('   üìã Vari√°veis no template: ' . count($info['template_variables']));
            $this->line('   üìã Vari√°veis definidas: ' . count($info['defined_variables']));

            return true;

        } catch (Exception $e) {
            $this->line('   ‚ùå Exce√ß√£o: ' . $e->getMessage());
            return false;
        }
    }

    /**
     * Testar limpeza de arquivos tempor√°rios
     */
    protected function testarLimpezaArquivos()
    {
        try {
            $templatePath = storage_path('app/templates/declaracao-akad-template.html');
            $processor = new TemplateProcessor($templatePath);
            
            // Criar m√∫ltiplos arquivos tempor√°rios
            $processor->setVariables([
                'DATA' => 'Teste',
                'NOME_CORRETORA' => 'Teste',
                'CODIGO_SUSEP' => 'Teste',
                'CNPJ_CORRETORA' => 'Teste',
                'DATA_GERACAO' => 'Teste'
            ]);

            $arquivos = [];
            for ($i = 1; $i <= 3; $i++) {
                $arquivo = $processor->saveToTempFile("teste-limpeza-{$i}.html");
                $arquivos[] = $arquivo;
            }

            $this->line('   üìù Criados ' . count($arquivos) . ' arquivos tempor√°rios');

            // Verificar se existem
            $existentes = 0;
            foreach ($arquivos as $arquivo) {
                if (file_exists($arquivo)) {
                    $existentes++;
                }
            }

            if ($existentes !== count($arquivos)) {
                $this->line('   ‚ùå Nem todos os arquivos foram criados');
                return false;
            }

            // Limpar um por um
            foreach ($arquivos as $arquivo) {
                if (!$processor->deleteTempFile($arquivo)) {
                    $this->line('   ‚ùå Erro ao deletar arquivo: ' . basename($arquivo));
                    return false;
                }
            }

            $this->line('   üóëÔ∏è Todos os arquivos foram deletados com sucesso');

            return true;

        } catch (Exception $e) {
            $this->line('   ‚ùå Exce√ß√£o: ' . $e->getMessage());
            return false;
        }
    }

    /**
     * Testar integra√ß√£o completa (simula√ß√£o)
     */
    protected function testarIntegracaoCompleta()
    {
        try {
            // Configurar token de teste
            config(['services.autentique.token' => 'test_token']);
            
            $corretor = new CorretorAkad([
                'id' => 999,
                'nome' => 'Corretor Integra√ß√£o Teste',
                'email' => 'integracao@teste.com',
                'cpf' => '111.222.333-44',
                'creci' => '555555',
                'estado' => 'MG',
                'telefone' => '(31) 99999-9999'
            ]);

            $service = new AutentiqueService();
            
            // Testar apenas a gera√ß√£o e prepara√ß√£o (sem envio real para API)
            $reflection = new ReflectionClass($service);
            $method = $reflection->getMethod('gerarHTMLComDados');
            $method->setAccessible(true);

            $resultado = $method->invoke($service, $corretor, 'declaracao-akad-template.html');

            if (!$resultado['success']) {
                $this->line('   ‚ùå Erro na gera√ß√£o HTML: ' . $resultado['error']);
                return false;
            }

            $tempFile = $resultado['file_path'];
            
            // Verificar se o arquivo est√° pronto para envio
            if (!file_exists($tempFile) || filesize($tempFile) === 0) {
                $this->line('   ‚ùå Arquivo HTML n√£o est√° pronto para envio');
                return false;
            }

            $this->line('   ‚úì HTML gerado e pronto para API');
            $this->line('   üìÑ Arquivo: ' . basename($tempFile));
            $this->line('   üìè Tamanho: ' . filesize($tempFile) . ' bytes');

            // Verificar conte√∫do final
            $content = file_get_contents($tempFile);
            $hasTitle = strpos($content, 'DECLARA√á√ÉO DE ATENDIMENTO') !== false;
            $hasCorretorData = strpos($content, $corretor->nome) !== false;
            
            if (!$hasTitle || !$hasCorretorData) {
                $this->line('   ‚ùå Conte√∫do HTML incompleto');
                return false;
            }

            $this->line('   ‚úì Conte√∫do HTML v√°lido e completo');
            $this->line('   ‚ÑπÔ∏è  Pronto para envio via API Autentique');

            // Limpar
            unlink($tempFile);

            return true;

        } catch (Exception $e) {
            $this->line('   ‚ùå Exce√ß√£o: ' . $e->getMessage());
            return false;
        }
    }

    /**
     * Mostrar resumo dos resultados
     */
    protected function mostrarResumo()
    {
        $this->newLine();
        $this->line('üìä Resumo da implementa√ß√£o:');
        $this->line('   ‚úÖ Template HTML: declaracao-akad-template.html');
        $this->line('   ‚úÖ TemplateProcessor: processamento e valida√ß√£o');
        $this->line('   ‚úÖ AutentiqueService: gera√ß√£o HTML com dados reais');
        $this->line('   ‚úÖ Limpeza autom√°tica: arquivos tempor√°rios');
        $this->line('   ‚úÖ Retry logic: busca de links de assinatura');
        $this->newLine();
        $this->line('üéØ Sistema pronto para:');
        $this->line('   ‚Ä¢ Renderizar documentos HTML com dados do corretor');
        $this->line('   ‚Ä¢ Enviar HTML renderizado (n√£o caminho) para Autentique');
        $this->line('   ‚Ä¢ Buscar links de assinatura com retry autom√°tico');
        $this->line('   ‚Ä¢ Gerenciar arquivos tempor√°rios automaticamente');
        $this->newLine();
        $this->line('üìÅ Estrutura implementada:');
        $this->line('   ‚Ä¢ storage/app/templates/declaracao-akad-template.html');
        $this->line('   ‚Ä¢ storage/app/temp/ (arquivos tempor√°rios)');
        $this->line('   ‚Ä¢ app/Services/TemplateProcessor.php');
        $this->line('   ‚Ä¢ app/Services/AutentiqueService.php (atualizado)');
    }
}